// /*
// Copyright Â© 2022 - 2024 SUSE LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/elemental-operator/pkg/util (interfaces: NsEnter)
//
// Generated by this command:
//
//	mockgen-v0.4.0 -copyright_file=scripts/boilerplate.go.txt -destination=pkg/util/mocks/nsenter.go -package=mocks github.com/rancher/elemental-operator/pkg/util NsEnter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNsEnter is a mock of NsEnter interface.
type MockNsEnter struct {
	ctrl     *gomock.Controller
	recorder *MockNsEnterMockRecorder
}

// MockNsEnterMockRecorder is the mock recorder for MockNsEnter.
type MockNsEnterMockRecorder struct {
	mock *MockNsEnter
}

// NewMockNsEnter creates a new mock instance.
func NewMockNsEnter(ctrl *gomock.Controller) *MockNsEnter {
	mock := &MockNsEnter{ctrl: ctrl}
	mock.recorder = &MockNsEnterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNsEnter) EXPECT() *MockNsEnterMockRecorder {
	return m.recorder
}

// IsSystemShuttingDown mocks base method.
func (m *MockNsEnter) IsSystemShuttingDown(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSystemShuttingDown", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSystemShuttingDown indicates an expected call of IsSystemShuttingDown.
func (mr *MockNsEnterMockRecorder) IsSystemShuttingDown(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSystemShuttingDown", reflect.TypeOf((*MockNsEnter)(nil).IsSystemShuttingDown), arg0)
}

// Reboot mocks base method.
func (m *MockNsEnter) Reboot(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reboot", arg0)
}

// Reboot indicates an expected call of Reboot.
func (mr *MockNsEnterMockRecorder) Reboot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockNsEnter)(nil).Reboot), arg0)
}
